#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu Aug  3 13:54:37 2017
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn parallel --citation
match_max 100000
expect -exact "Academic tradition requires you to cite works you base your article on.\r
When using programs that use GNU Parallel to process data for publication\r
please cite:\r
\r
@article{Tange2011a,\r
  title = {GNU Parallel - The Command-Line Power Tool},\r
  author = {O. Tange},\r
  address = {Frederiksberg, Denmark},\r
  journal = {;login: The USENIX Magazine},\r
  month = {Feb},\r
  number = {1},\r
  volume = {36},\r
  url = {http://www.gnu.org/s/parallel},\r
  year = {2011},\r
  pages = {42-47},\r
  doi = {10.5281/zenodo.16303}\r
}\r
\r
(Feel free to use \\nocite{Tange2011a})\r
\r
This helps funding further development; AND IT WON'T COST YOU A CENT.\r
If you pay 10000 EUR you should feel free to use GNU Parallel without citing.\r
\r
If you send a copy of your published article to tange@gnu.org, it will be\r
mentioned in the release notes of next version of GNU Parallel.\r
\r
\r
\r
Type: 'will cite' and press enter.\r
> "
send -- "will cite\r"
expect eof
